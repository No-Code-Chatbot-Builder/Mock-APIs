
FORMAT: 1A
HOST: https://polls.apiblueprint.org/

# NCBP
Notes:
1. Use Camel Case identfiers
2. For GET, no request but parameters in URL
3. In response please do not keep status but boolean success var



## Bot creation and Usage
### Create a New Bot [POST]

You may create your own bot using this action. It takes a JSON
object containing the purpose and data source.

+ Request (application/json)

        {
            "purpose": "Bot for helping in HCI course",
            "data": "[binary file content]"
        }

+ Response 201 (application/json)


        {
            "success": True,
            "message": "Bot assigned successfully",
            "botId": 12345 // corresponds to the bot_id of specific niche base bots
        }


### Use the Bot [POST]

You may use your bot using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        {
            "query": "Make a sample paper for HCI",
            /*
                This query would be combined with the data stored in backend and the prompt 
                made would be send to the base model which would return the answer
            */
            
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

        {
            "success": True,
            "message": "Here's your sample paper",
            "response": "Sample paper content generated by the bot..."
        }
        
        

## User related APIs 
### Creating User [CREATE]

You may create a user using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        {
            "username": "john_doe",
            "email": "john.doe@example.com",
            "password": "secure_password",
            "fullName": "John Doe",
            "dateOfBirth": "1990-05-15",
            "address": {
                "street": "123 Main St",
                "city": "Cityville",
                "state": "State",
                "zip": "12345"
            }
        }

+ Response 201 (application/json)

    + Headers

            Location: /user/create

    + Body

        {
            "success": True,
            "message": "signup successfully",
        }
        
        
        
### Getting User [GET]

You may get a user information using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        {
            "token": "f1338ca26835863f671403941738a7b49e740fc0"
        }

+ Response 201 (application/json)

    + Headers

            Location: /user/get

    + Body

        {
            "success": True,
            "message": "retrieve user information successfully",
            "userId": "1234",
            "userInfo": {
            {
                "username": "john_doe",
                "email": "john.doe@example.com",
                "password": "secure_password",
                "fullName": "John Doe",
                "dateOfBirth": "1990-05-15",
                "address": {
                    "street": "123 Main St",
                    "city": "Cityville",
                    "state": "State",
                    "zip": "12345"
            }
                }
            }
        }
        
        
        
### Update User [UPDATE]

You may update a user information using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        {
            "name": "XYZ",
            "address": "ABC",
            "token": "f1338ca26835863f671403941738a7b49e740fc0"
        }

+ Response 201 (application/json)

    + Headers

            Location: /user/update

    + Body

        {
            "success": True,
            "updatedFields": ["name", "address"] 
            "message": "update successfully",

        }



## workspace related APIs

### Create workspace [CREATE]

You may create a workspace using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        {
            "name": "string", // Required: Name of the workspace
            "description": "string", // Optional: A brief description of the workspace
            "ownerId": "string", // Required: User ID of the workspace owner
            "members": [ // Optional: Initial list of members (user IDs) in the workspace
            "userId1",
            "userId2"
            ],
            "settings": { // Optional: Custom settings for the workspace
            "setting1": "value1",
            "setting2": "value2"
            }
        }


+ Response 201 (application/json)

    + Headers

            Location: /workspace/create

    + Body

        {
            "success": True,
            "message": "Workspace created successfully.",
            "workspaceId": "generatedWorkspaceId", // Unique identifier for the new workspace
            "workspaceDetails": {
            "name": "string",
            "description": "string",
            "ownerId": "string",
            "members": ["userId1", "userId2"],
            "settings": {
              "setting1": "value1",
              "setting2": "value2"
                }
            }
        }

        
        
### Get workspaces [GET]

You may fetch list of workspaces using this action. It takes a JSON
object containing the query.

+ Request (application/json)

        userId: The ID of the user for whom to fetch workspaces. If provided, the API will return workspaces associated with this user.
        page: The page number for pagination.
        pageSize: The number of workspaces per page for pagination.
        
+ Response 201 (application/json)

    + Headers

            Location: /workspace/get

    + Body

        {
            "success": True,
            "workspaces": [
            {
              "id": "workspaceId1",
              "name": "Workspace 1",
              "ownerId": "userId1",
              "members": ["userId2", "userId3"],
              "settings": {
                "setting1": "value1"
              }
            },
            {
              "id": "workspaceId2",
              "name": "Workspace 2",
              "ownerId": "userId4",
              "members": ["userId5", "userId6"],
              "settings": {
                "setting2": "value2"
              }
            }
            // ... other workspaces
            ],
            "totalWorkspaces": 50, // Total number of workspaces
            "currentPage": 1, // Current page number
            "pageSize": 10 // Number of workspaces per page
        }





### Get workspace [GET]

You may fetch a specific workspace detail using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        workspaceId [required]: The unique identifier of the workspace whose details are to be retrieved.


+ Response 201 (application/json)

    + Headers

            Location: /workspace/{id}

    + Body

        {
            "success": True,
            "workspace": {
            "id": "workspaceId",
            "name": "Workspace Name",
            "description": "Workspace Description",
            "ownerId": "ownerUserId",
            "members": [
              "memberUserId1",
              "memberUserId2",
              // ... other member IDs
            ],
            "settings": {
              // ... various settings
            }
            }
        }
        

### Get workspace Assistants [CREATE]

You may fetch a specific workspace's all assistants using this action. 
It takes a JSONobject containing the query.


+ Request (application/json)

        {
            "user_id": "john_doe",

        }

+ Response 201 (application/json)

    + Headers

            Location: /workspace/{id}/assistants

    + Body

        {
            "status": "success",
            "message": "List of assistants retrieved successfully",
            "assistants": [
                {
                    "assistant_id": "assistant1",
                    "name": "SupportBot",
                    "type": "Customer Support",
                    "created_at": "2024-01-21T14:00:00Z"
                },
                {
                    "assistant_id": "assistant2",
                    "name": "ResearchBot",
                    "type": "Research",
                    "created_at": "2024-01-22T09:30:00Z"
                }
                // ... additional assistants
            ]
        }
        
        
### Get specific assistant [GET]

You may get a specific assistant using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        {
            "assistant_Id": "123"
            //no workspace id because the user will already be in the workspace
        }

+ Response 201 (application/json)

    + Headers

            Location: /workspace/{id}/assistants/{assist_id}

    + Body

            {
                "status": "success",
                "message": "Assistant details retrieved successfully",
                "assistant_details": {
                    "assistant_id": "assistant1",
                    "name": "SupportBot",
                    "type": "Customer Support",
                    "description": "A bot designed for handling customer queries",
                    "created_at": "2024-01-21T14:00:00Z"
                }
            }
        
        

### Delete all assistants with all its workspaces [DELETE]

You may invite user to a workspace using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        {
            "user_id": "john_doe",
            "workspace_Id": "123",
        }

+ Response 201 (application/json)

    + Headers

            Location: /workspace/{id}/invite

    + Body

        {
            "status": "success",
            "message": "User invited to the workspace successfully",
            "invitation_id": "invitation_id123",
            "invitation_details": {
                "workspace_id": "workspace1",
                "user_email": "invited_user@example.com",
                "status": "pending",
                "created_at": "2024-01-21T15:30:00Z"
            }
        }
You may delete all assistants and the workspace using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        {
            "user_id": "john_doe",
            "workspace_Id": "MyWorkspace",
        }

+ Response 201 (application/json)

    + Headers

            Location: /workspace/delete/{id}

    + Body

        {
            "status": "success",
            "message": "Workspace and its assistants deleted successfully",
            "deleted_workspace_id": "workspace1",
            "deleted_assistants": [
                {
                    "assistant_id": "assistant1",
                    "name": "SupportBot"
                },
                {
                    "assistant_id": "assistant2",
                    "name": "ResearchBot"
                }
                // ... additional deleted assistants
            ]
        }
        

## Dataset related APIs

### Create dataset [CREATE]

You may create a dataset using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        {
            "name": "string", // Required: Name of the dataset
            "description": "string", // Optional: A brief description of the particular dataset
            "workspaceId": "string", // Required: workspace ID
        }


+ Response 201 (application/json)

    + Headers

            Location: /dataset/create

    + Body

        {
            "success": True,
            "message": "Dataset created successfully.",
            "workspaceId": "generatedDatasetId", // Unique identifier for the new dataset
            "datasetDetails": {
            "name": "string",
            "description": "string",
            "workspaceId": "string",
        }

        
        
### Get datasets [GET]

You may fetch list of datasets using this action. It takes a JSON
object containing the query.

+ Request (application/json)

        workspaceId: The ID of the workspace for whom to fetch datasets. If provided, the API will return datasets associated with this workspace.
        page: The page number for pagination.
        pageSize: The number of workspaces per page for pagination.
        
+ Response 201 (application/json)

    + Headers

            Location: /dataset/get

    + Body

        {
            "success": True,
            "datasets": [
            {
              "id": "datasetId1",
              "name": "Dataset 1",
              "workspaceId": "workspaceId1",
              "data": [
                // ... list of data files (File, Text, Url)
              ]
            },
            {
              "id": "datasetId2",
              "name": "Dataset 2",
              "workspaceId": "workspaceId1",
              "data": [
                // ... list of data files (File, Text, Url)
              ]
            },
            // ... other workspaces
            ],
            "totalDatasets": 50, // Total number of datasets
            "currentPage": 1, // Current page number
            "pageSize": 10 // Number of datasets per page
        }





### Get dataset [GET]

You may fetch a specific dataset detail using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        workspaceId [required]: The unique identifier of the workspace whose details are to be retrieved.


+ Response 201 (application/json)

    + Headers

            Location: /dataset/{id}

    + Body

        {
            "success": True,
            "dataset": {
            "id": "datasetId",
            "name": "Dataset Name",
            "description": "Dataset Description",
            "workspaceId": "workspaceId",
            "data": [
              {
                "id": "dataId1",
                "type": "file",
                "path": "https://s3:pathfile",
              },
              {
                "id": "dataId2",
                "type": "text",
                "content": "Hello world This is NCBP"
              },
              {
                "id": "dataId3",
                "type": "website",
                "url": "https://www.google.com"
              }
              // ... other data
            ],
            "settings": {
              // ... various settings
            }
            }
        }
        

### Add Data to Dataset [CREATE]

You may add a data to a particular dataset using this action. 
It takes a JSONobject containing the query.


+ Request (application/json)

        {
            "data_id": "newDataId",
            "type": "file",
            "path": "https://s3:pathfile"
        }

+ Response 201 (application/json)

    + Headers

            Location: /dataset/{id}/add

    + Body

        {
            "status": "success",
            "message": "Data added to dataset {id} successfully",
            "datasetId": "datasetId",
            "dataDetails": {
                "data_id": "newDataId",
                "type": "file",
                "path": "https://s3:pathfile"
            }
        }
        
        
### Get specific data from dataset [GET]

You may get a specific data content using this action. It takes a JSON
object containing the query.


+ Request (application/json)

        {
            "dataset_id": "123"
            "data_id": "456"
        }

+ Response 201 (application/json)

    + Headers

            Location: /workspace/{id}/assistants/{assist_id}

    + Body

            {
                "status": "success",
                "message": "Data details retrieved successfully",
                "data_details": {
                    "data_id": "newDataId",
                    "type": "file",
                    "path": "https://s3:pathfile"
                }
            }

        
        
        

        
    




